USE [master]
GO
/****** Object:  Database [Estuda_Sql]    Script Date: 19/10/2023 17:37:45 ******/
CREATE DATABASE [Estuda_Sql]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'Estuda_Sql', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL14.PDA_DEV\MSSQL\DATA\Estuda_Sql.mdf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'Estuda_Sql_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL14.PDA_DEV\MSSQL\DATA\Estuda_Sql_log.ldf' , SIZE = 8192KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
GO
ALTER DATABASE [Estuda_Sql] SET COMPATIBILITY_LEVEL = 140
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [Estuda_Sql].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [Estuda_Sql] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [Estuda_Sql] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [Estuda_Sql] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [Estuda_Sql] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [Estuda_Sql] SET ARITHABORT OFF 
GO
ALTER DATABASE [Estuda_Sql] SET AUTO_CLOSE ON 
GO
ALTER DATABASE [Estuda_Sql] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [Estuda_Sql] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [Estuda_Sql] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [Estuda_Sql] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [Estuda_Sql] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [Estuda_Sql] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [Estuda_Sql] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [Estuda_Sql] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [Estuda_Sql] SET  ENABLE_BROKER 
GO
ALTER DATABASE [Estuda_Sql] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [Estuda_Sql] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [Estuda_Sql] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [Estuda_Sql] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [Estuda_Sql] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [Estuda_Sql] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [Estuda_Sql] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [Estuda_Sql] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [Estuda_Sql] SET  MULTI_USER 
GO
ALTER DATABASE [Estuda_Sql] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [Estuda_Sql] SET DB_CHAINING OFF 
GO
ALTER DATABASE [Estuda_Sql] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [Estuda_Sql] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [Estuda_Sql] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [Estuda_Sql] SET QUERY_STORE = OFF
GO
USE [Estuda_Sql]
GO
/****** Object:  UserDefinedFunction [dbo].[IMC_FN_CALCULA_IMC]    Script Date: 19/10/2023 17:37:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[IMC_FN_CALCULA_IMC]
   (@PESO DECIMAL(5,2), @ALTURA DECIMAL(5,2))
RETURNS DECIMAL(5,2)
AS
BEGIN
    DECLARE @IMC DECIMAL(5,2)
    SET @IMC = @PESO / (@ALTURA * @ALTURA)
    RETURN @IMC
END
GO
/****** Object:  UserDefinedFunction [dbo].[IMC_FN_CLASSIFICACAO]    Script Date: 19/10/2023 17:37:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[IMC_FN_CLASSIFICACAO] (@IMC DECIMAL(18,2)) 
RETURNS VARCHAR(255) 
AS  
BEGIN  
      RETURN (
	  SELECT CASE WHEN @IMC < 16.9                THEN 'MUITO ABAIXO DO PESO' 
				WHEN @IMC BETWEEN 17   AND 18.4 THEN 'ABAIXO DO PESO'
				WHEN @IMC BETWEEN 18.5 AND 24.9 THEN 'PESO NORMAL'
				WHEN @IMC BETWEEN 25   AND 29.9	THEN 'ACIMA DO PESO'
				WHEN @IMC BETWEEN 30   AND 34.9	THEN 'OBESIDADE GRAU I'
				WHEN @IMC BETWEEN 35   AND 40	THEN 'OBESIDADE GRAU II'
				WHEN @IMC > 40					THEN 'OBESIDADE GRAU III'
		   END )
END  
GO
/****** Object:  UserDefinedFunction [dbo].[IMC_FN_VALIDACPF]    Script Date: 19/10/2023 17:37:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[IMC_FN_VALIDACPF] (@CPF VARCHAR(11))
RETURNS BIT
AS
BEGIN
    DECLARE @RESULTADO BIT = 0;
    DECLARE @SOMA1 INT, @SOMA2 INT;
    DECLARE @DIGITO1 INT, @DIGITO2 INT;

    -- REMOVER CARACTERES NÃO NUMÉRICOS
    SET @CPF = REPLACE(@CPF, '-', '');
    SET @CPF = REPLACE(@CPF, '.', '');

    -- VERIFICAR SE O CPF TEM 11 DÍGITOS
    IF LEN(@CPF) = 11
    BEGIN
        -- CÁLCULO DO PRIMEIRO DÍGITO VERIFICADOR
        SET @SOMA1 = CAST(SUBSTRING(@CPF, 1, 1) AS INT) * 10
                  + CAST(SUBSTRING(@CPF, 2, 1) AS INT) * 9
                  + CAST(SUBSTRING(@CPF, 3, 1) AS INT) * 8
                  + CAST(SUBSTRING(@CPF, 4, 1) AS INT) * 7
                  + CAST(SUBSTRING(@CPF, 5, 1) AS INT) * 6
                  + CAST(SUBSTRING(@CPF, 6, 1) AS INT) * 5
                  + CAST(SUBSTRING(@CPF, 7, 1) AS INT) * 4
                  + CAST(SUBSTRING(@CPF, 8, 1) AS INT) * 3
                  + CAST(SUBSTRING(@CPF, 9, 1) AS INT) * 2;

        SET @DIGITO1 = 11 - (@SOMA1 % 11);

        IF @DIGITO1 >= 10
            SET @DIGITO1 = 0;

        -- CÁLCULO DO SEGUNDO DÍGITO VERIFICADOR
        SET @SOMA2 = CAST(SUBSTRING(@CPF, 1, 1) AS INT) * 11
                  + CAST(SUBSTRING(@CPF, 2, 1) AS INT) * 10
                  + CAST(SUBSTRING(@CPF, 3, 1) AS INT) * 9
                  + CAST(SUBSTRING(@CPF, 4, 1) AS INT) * 8
                  + CAST(SUBSTRING(@CPF, 5, 1) AS INT) * 7
                  + CAST(SUBSTRING(@CPF, 6, 1) AS INT) * 6
                  + CAST(SUBSTRING(@CPF, 7, 1) AS INT) * 5
                  + CAST(SUBSTRING(@CPF, 8, 1) AS INT) * 4
                  + CAST(SUBSTRING(@CPF, 9, 1) AS INT) * 3
                  + @DIGITO1 * 2;

        SET @DIGITO2 = 11 - (@SOMA2 % 11);

        IF @DIGITO2 >= 10
            SET @DIGITO2 = 0;

        -- VERIFICAR SE OS DÍGITOS VERIFICADORES SÃO IGUAIS AOS DO CPF
        IF @DIGITO1 = CAST(SUBSTRING(@CPF, 10, 1) AS INT)
           AND @DIGITO2 = CAST(SUBSTRING(@CPF, 11, 1) AS INT)
            SET @RESULTADO = 1;
    END

    RETURN @RESULTADO;
END;
GO
/****** Object:  Table [dbo].[IMC_LOG_DELETADO]    Script Date: 19/10/2023 17:37:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IMC_LOG_DELETADO](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[USER_ID] [int] NOT NULL,
	[USERNAME] [varchar](255) NOT NULL,
	[EMAIL] [varchar](255) NOT NULL,
	[NOME] [varchar](255) NOT NULL,
	[CPF] [varchar](255) NOT NULL,
	[DT_DELETADO] [date] NOT NULL,
 CONSTRAINT [PK_IMC_LOG_DELETADO] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IMC_TB_INFO_USER]    Script Date: 19/10/2023 17:37:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IMC_TB_INFO_USER](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[USER_ID] [int] NOT NULL,
	[NOME] [varchar](255) NOT NULL,
	[CPF] [varchar](11) NOT NULL,
	[DT_NACIMENTO] [varchar](255) NOT NULL,
	[PESO] [decimal](5, 2) NOT NULL,
	[ALTURA] [decimal](5, 2) NOT NULL,
 CONSTRAINT [PK_IMC_TB_INFO_USER] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IMC_TB_RESULTADO]    Script Date: 19/10/2023 17:37:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IMC_TB_RESULTADO](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[INFO_USER_ID] [int] NOT NULL,
	[IMC] [decimal](5, 2) NULL,
	[DT_CALCULO] [date] NULL,
	[CLASSIFICADO] [varchar](255) NULL,
 CONSTRAINT [PK_IMC_TB_RESULTADO] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IMC_TB_USER]    Script Date: 19/10/2023 17:37:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IMC_TB_USER](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[USERNAME] [varchar](255) NOT NULL,
	[EMAIL] [varchar](255) NOT NULL,
	[PASSWORD] [varchar](255) NOT NULL,
 CONSTRAINT [PK_IMC_TB_USER] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[IMC_TB_INFO_USER]  WITH CHECK ADD  CONSTRAINT [FK_IMC_TB_INFO_USER_IMC_TB_USER] FOREIGN KEY([USER_ID])
REFERENCES [dbo].[IMC_TB_USER] ([ID])
GO
ALTER TABLE [dbo].[IMC_TB_INFO_USER] CHECK CONSTRAINT [FK_IMC_TB_INFO_USER_IMC_TB_USER]
GO
ALTER TABLE [dbo].[IMC_TB_RESULTADO]  WITH CHECK ADD  CONSTRAINT [FK_IMC_TB_RESULTADO_IMC_TB_INFO_USER1] FOREIGN KEY([INFO_USER_ID])
REFERENCES [dbo].[IMC_TB_INFO_USER] ([ID])
GO
ALTER TABLE [dbo].[IMC_TB_RESULTADO] CHECK CONSTRAINT [FK_IMC_TB_RESULTADO_IMC_TB_INFO_USER1]
GO
/****** Object:  StoredProcedure [dbo].[IMC_SP_ALTERAR_PESO_ALTURA]    Script Date: 19/10/2023 17:37:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[IMC_SP_ALTERAR_PESO_ALTURA] --[IMC_SP_ALTERAR_PESO_ALTURA] '49747128888', 100, 1.806

	@CPF VARCHAR(11) 
  , @PESO DECIMAL(10,2) 
  , @ALTURA DECIMAL(10,2)
  , @CPF_VALIDO BIT = NULL
  , @CPF_VALIDA VARCHAR(11) = NULL
  , @RETORNO VARCHAR(255) = null OUTPUT
AS
BEGIN

	SET @CPF_VALIDO = DBO.IMC_FN_VALIDACPF(@CPF);
	SELECT @CPF_VALIDA = CPF FROM IMC_TB_INFO_USER WHERE CPF = @CPF

	IF @CPF = @CPF_VALIDA AND @CPF_VALIDO = 1
	BEGIN
		UPDATE IMC_TB_INFO_USER SET PESO = @PESO, ALTURA = @ALTURA WHERE CPF = @CPF;
		SET @RETORNO = 'Informacoes alteradas com sucesso'
		
		
	END
	ELSE
	BEGIN
		SET @RETORNO = 'Cpf invalido!'
		
	END
	

END
GO
/****** Object:  StoredProcedure [dbo].[IMC_SP_ALTERAR_SENHA]    Script Date: 19/10/2023 17:37:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[IMC_SP_ALTERAR_SENHA]
      @ID INT 
    , @SENHA_ATUAL VARCHAR(255) = 'J123HJJH123'
	, @NOVA_SENHA VARCHAR(255) = '12345678'
	, @RETORNO VARCHAR(255) = NULL OUTPUT
AS
BEGIN
    DECLARE @SENHA_ARMAZENADA VARCHAR(255)
    
    SELECT @SENHA_ARMAZENADA = PASSWORD FROM IMC_TB_USER WHERE ID = @ID

    IF @SENHA_ATUAL = @SENHA_ARMAZENADA
    BEGIN
        IF (LEN(@NOVA_SENHA) >= 8)  
        BEGIN
            UPDATE IMC_TB_USER SET PASSWORD = @NOVA_SENHA WHERE ID = @ID
             SET @RETORNO = 'SENHA ALTERADA COM SUCESSO!'
        END
        ELSE
        BEGIN
            SET @RETORNO = 'NOVA SENHA NÃO ATENDE AOS REQUISITOS MÍNIMOS'
        END
    END
    ELSE
    BEGIN
        SET @RETORNO = 'SENHA INVALIDA'
    END

END

SELECT * FROM IMC_TB_USER
GO
/****** Object:  StoredProcedure [dbo].[IMC_SP_CONSULTA_USUARIO]    Script Date: 19/10/2023 17:37:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[IMC_SP_CONSULTA_USUARIO] --[IMC_SP_CONSULTA_USUARIO] 'math.cruz'
    @USERNAME VARCHAR(255) 
AS
BEGIN
    ;WITH CONSULTA AS (
        SELECT
              A.ID         
            , B.NOME
            , B.PESO
            , B.ALTURA
			, C.IMC
			, C.CLASSIFICADO
			, C.DT_CALCULO
        FROM IMC_TB_USER A
        JOIN IMC_TB_INFO_USER B ON B.USER_ID = A.ID
		JOIN IMC_TB_RESULTADO C ON C.INFO_USER_ID = B.ID
        WHERE A.USERNAME = @USERNAME
    )
	


    SELECT
          A.ID
        , A.NOME
        ,(
            SELECT
                  B.PESO
                , B.ALTURA
				, B.IMC
				, B.CLASSIFICADO
				, B.DT_CALCULO
            FROM CONSULTA B
			WHERE A.ID = B.ID
            FOR JSON PATH
        ) AS 'HISTORIOCO IMC'
    FROM CONSULTA A
	GROUP BY A.ID
	       , A.NOME
    FOR JSON PATH, ROOT ('USUARIO')
END
GO
/****** Object:  StoredProcedure [dbo].[IMC_SP_CRIACAO_USUARIO]    Script Date: 19/10/2023 17:37:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[IMC_SP_CRIACAO_USUARIO] --[IMC_SP_CRIACAO_USUARIO] 'MATH.CRUZ', 'J123HJJH123', 'USER@GMAIL.COM', 'MATHEUS', '25799725018', 83.50, 1.86, '2002-11-26'   
	  @USERNAME VARCHAR(255) 
	, @PASSWORD VARCHAR(255) 
	, @EMAIL VARCHAR(255) 
	, @NOME VARCHAR(30) 
    , @CPF VARCHAR(11) 
    , @PESO DECIMAL(5,2) 
	, @ALTURA DECIMAL(5,2) 
    , @DT_NACIMENTO DATE 
	, @USER_ID INT = NULL
	, @CPFVALIDO BIT = NULL
	, @RETORNO VARCHAR(255) = null OUTPUT

AS
BEGIN

    SET @CPFVALIDO = DBO.IMC_FN_VALIDACPF(@CPF);

    IF @CPFVALIDO = 1
		BEGIN
			INSERT INTO IMC_TB_USER(USERNAME, PASSWORD, EMAIL)
			VALUES (@USERNAME, @PASSWORD, @EMAIL);
			SET @USER_ID = @@IDENTITY
			INSERT INTO IMC_TB_INFO_USER(USER_ID, NOME, CPF, DT_NACIMENTO, PESO, ALTURA)
			VALUES (@USER_ID, @NOME, @CPF, @DT_NACIMENTO, @PESO, @ALTURA)
			SET @RETORNO = 'USUARIO CADASTRADO COM SUCESSO!'
		END;
	ELSE
		BEGIN
			SET @RETORNO = 'CPF INVALIDO!'
		END;
END;
GO
/****** Object:  StoredProcedure [dbo].[IMC_SP_DELETAR_USUARIO]    Script Date: 19/10/2023 17:37:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[IMC_SP_DELETAR_USUARIO] --[IMC_SP_DELETAR_USUARIO]  8, '2131231231'
	  @ID INT
	, @PASSWORD VARCHAR(255)
	, @RETORNO VARCHAR(255) = NULL OUTPUT

  AS
BEGIN
	IF (SELECT COUNT(1) FROM IMC_TB_USER WHERE ID = @ID ) > 0
	BEGIN
		IF @PASSWORD = (SELECT PASSWORD FROM IMC_TB_USER WHERE ID = @ID)
		BEGIN
			INSERT INTO IMC_LOG_DELETADO (USER_ID, USERNAME, EMAIL, NOME, CPF, DT_DELETADO) SELECT B.USER_ID, A.USERNAME,A.EMAIL, B.NOME, B.CPF,  GETDATE() FROM IMC_TB_USER A JOIN IMC_TB_INFO_USER B ON A.ID = B.USER_ID WHERE A.ID = @ID;
			DELETE FROM IMC_TB_INFO_USER WHERE USER_ID = @ID;
			DELETE FROM IMC_TB_USER WHERE ID = @ID;
			SET @RETORNO = 'USUARIO DELETADO COM SUCESSO'
		END
		ELSE
		BEGIN
			SET @RETORNO = 'SENHA INCORRETA!'
		END
	END
	ELSE
	BEGIN
		SET @RETORNO = 'ID NAO ENCONTRADO'
	END
END

GO
/****** Object:  StoredProcedure [dbo].[IMC_SP_RESULTADO]    Script Date: 19/10/2023 17:37:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[IMC_SP_RESULTADO] --[IMC_SP_RESULTADO] NULL, NULL, 5, NULL, null
	  @ALTURA DECIMAL(5,2) = NULL
	, @PESO DECIMAL(5,2) = NULL
	, @INFO_USER_ID INT
	, @IMC DECIMAL(5,2) = NULL
	, @RETORNO VARCHAR(255) = NULL OUTPUT
AS
BEGIN

	SELECT @ALTURA = ALTURA, @PESO = PESO FROM IMC_TB_INFO_USER WHERE ID = @INFO_USER_ID
	
	SET @IMC = DBO.IMC_FN_CALCULA_IMC(@PESO, @ALTURA)
	IF(SELECT ID FROM IMC_TB_INFO_USER where ID = @INFO_USER_ID) != 0
	BEGIN
	INSERT INTO IMC_TB_RESULTADO (
				INFO_USER_ID
			  , IMC
			  , DT_CALCULO
			  , CLASSIFICADO
			  ) 
			  VALUES (
			  @INFO_USER_ID
			, @IMC
			, GETDATE()
			, (SELECT DBO.IMC_FN_CLASSIFICACAO(@IMC))
			)
			SET @RETORNO = 'CALCULO FEITO COM SUCESSO!'
	END
	else
	begin
	set @RETORNO = 'id nao encontrado!'
	end
END
GO
USE [master]
GO
ALTER DATABASE [Estuda_Sql] SET  READ_WRITE 
GO
